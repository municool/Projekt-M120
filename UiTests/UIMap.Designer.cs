// ------------------------------------------------------------------------------
//  <auto-generated>
//      Dieser Code wurde vom Coded UI-Test-Generator generiert.
//      Version: 14.0.0.0
//
//      In dieser Datei sind spezialisierte Klassen definiert, die in einem
//      Coded UI-Test verwendet werden.
//      In dieser Datei können die erforderlichen Anpassungen vorgenommen werden.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UiTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// CreateEinsatz - Verwenden Sie "CreateEinsatzParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void CreateEinsatz()
        {
            #region Variable Declarations
            WpfButton uIEinsatzerstellenButton = this.UIPersonalPlanerWindow.UIEinsatzerstellenButton;
            WpfComboBox uICbEinsatzComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbEinsatzComboBox;
            WpfComboBox uICbMitarbeiterComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbMitarbeiterComboBox;
            WpfComboBox uICbBeginTimeHourComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbBeginTimeHourComboBox;
            WpfComboBox uICbBeginTimeMinComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbBeginTimeMinComboBox;
            WpfComboBox uICbZeitAufwandComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbZeitAufwandComboBox;
            WpfDatePicker uIDPdateDatePicker = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UIDPdateDatePicker;
            WpfButton uISpeichernButton = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UISpeichernButton;
            #endregion

            // Klicken "Einsatz erstellen" Schaltfläche
            Mouse.Click(uIEinsatzerstellenButton, new Point(23, 5));

            // "2" in "cbEinsatz" Kombinationsfeld auswählen
            uICbEinsatzComboBox.SelectedItem = this.CreateEinsatzParams.UICbEinsatzComboBoxSelectedItem;

            // "1" in "cbMitarbeiter" Kombinationsfeld auswählen
            uICbMitarbeiterComboBox.SelectedItem = this.CreateEinsatzParams.UICbMitarbeiterComboBoxSelectedItem;

            // "08" in "cbBeginTimeHour" Kombinationsfeld auswählen
            uICbBeginTimeHourComboBox.SelectedItem = this.CreateEinsatzParams.UICbBeginTimeHourComboBoxSelectedItem;

            // "00" in "cbBeginTimeMin" Kombinationsfeld auswählen
            uICbBeginTimeMinComboBox.SelectedItem = this.CreateEinsatzParams.UICbBeginTimeMinComboBoxSelectedItem;

            // "7" in "cbZeitAufwand" Kombinationsfeld auswählen
            uICbZeitAufwandComboBox.SelectedItem = this.CreateEinsatzParams.UICbZeitAufwandComboBoxSelectedItem;

            // "06-Jun-2016" in "dPdate" Datumsauswahl auswählen
            uIDPdateDatePicker.DateAsString = this.CreateEinsatzParams.UIDPdateDatePickerDateAsString;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(285, 15));
        }
        
        /// <summary>
        /// CreateEinsatz_Assert - Verwenden Sie "CreateEinsatz_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void CreateEinsatz_Assert()
        {
            #region Variable Declarations
            WpfText uIDerEinsatzwurdeerfolText = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UIDerEinsatzwurdeerfolText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Der Einsatz wurde erfolgreich erstellt!" Bezeichnung ist gleich 'Der Einsatz wurde erfolgreich erstellt!'
            Assert.AreEqual(this.CreateEinsatz_AssertExpectedValues.UIDerEinsatzwurdeerfolTextDisplayText, uIDerEinsatzwurdeerfolText.DisplayText);
        }
        
        /// <summary>
        /// CloseWindow
        /// </summary>
        public void CloseWindow()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIPersonalPlanerWindow1.UISchließenButton;
            #endregion

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(34, 14));
        }
        
        /// <summary>
        /// UpdateEinsatz - Verwenden Sie "UpdateEinsatzParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void UpdateEinsatz()
        {
            #region Variable Declarations
            WpfButton uIAlleEinsätzeButton = this.UIPersonalPlanerWindow.UIAlleEinsätzeButton;
            WpfText uIAffolterText = this.UIPersonalPlanerWindow.UILvEinsaetzeCustom.UIDgEinsaetzeTable.UIItem1Row.UIAffolterCell.UIAffolterText;
            WpfComboBox uICbMitarbeiterComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbMitarbeiterComboBox;
            WpfDatePicker uIDPdateDatePicker = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UIDPdateDatePicker;
            WpfButton uISpeichernButton = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UISpeichernButton;
            #endregion

            // Klicken "Alle Einsätze" Schaltfläche
            Mouse.Click(uIAlleEinsätzeButton, new Point(81, 7));

            // Doppelklicken "Affolter" Bezeichnung
            Mouse.DoubleClick(uIAffolterText, new Point(62, 6));

            // "2" in "cbMitarbeiter" Kombinationsfeld auswählen
            uICbMitarbeiterComboBox.SelectedItem = this.UpdateEinsatzParams.UICbMitarbeiterComboBoxSelectedItem;

            // "08-Jun-2016" in "dPdate" Datumsauswahl auswählen
            uIDPdateDatePicker.DateAsString = this.UpdateEinsatzParams.UIDPdateDatePickerDateAsString;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(268, 13));
        }
        
        /// <summary>
        /// UpdateEinsatz_Assert - Verwenden Sie "UpdateEinsatz_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void UpdateEinsatz_Assert()
        {
            #region Variable Declarations
            WpfText uIDerEinsatzwurdeerfolText = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UIDerEinsatzwurdeerfolText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Der Einsatz wurde erfolgreich erstellt!" Bezeichnung ist gleich 'Der Einsatz wurde erfolgreich geändert!'
            Assert.AreEqual(this.UpdateEinsatz_AssertExpectedValues.UIDerEinsatzwurdeerfolTextDisplayText, uIDerEinsatzwurdeerfolText.DisplayText);
        }
        
        /// <summary>
        /// CreateEinsatzInFalseTimespan - Verwenden Sie "CreateEinsatzInFalseTimespanParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void CreateEinsatzInFalseTimespan()
        {
            #region Variable Declarations
            WpfButton uIEinsatzerstellenButton = this.UIPersonalPlanerWindow.UIEinsatzerstellenButton;
            WpfComboBox uICbEinsatzComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbEinsatzComboBox;
            WpfComboBox uICbMitarbeiterComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbMitarbeiterComboBox;
            WpfComboBox uICbBeginTimeHourComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbBeginTimeHourComboBox;
            WpfComboBox uICbBeginTimeMinComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbBeginTimeMinComboBox;
            WpfComboBox uICbZeitAufwandComboBox = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UICbZeitAufwandComboBox;
            WpfDatePicker uIDPdateDatePicker = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UIDPdateDatePicker;
            WpfButton uISpeichernButton = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UISpeichernButton;
            #endregion

            // Klicken "Einsatz erstellen" Schaltfläche
            Mouse.Click(uIEinsatzerstellenButton, new Point(25, 11));

            // "2" in "cbEinsatz" Kombinationsfeld auswählen
            uICbEinsatzComboBox.SelectedItem = this.CreateEinsatzInFalseTimespanParams.UICbEinsatzComboBoxSelectedItem;

            // "2" in "cbMitarbeiter" Kombinationsfeld auswählen
            uICbMitarbeiterComboBox.SelectedItem = this.CreateEinsatzInFalseTimespanParams.UICbMitarbeiterComboBoxSelectedItem;

            // "09" in "cbBeginTimeHour" Kombinationsfeld auswählen
            uICbBeginTimeHourComboBox.SelectedItem = this.CreateEinsatzInFalseTimespanParams.UICbBeginTimeHourComboBoxSelectedItem;

            // "00" in "cbBeginTimeMin" Kombinationsfeld auswählen
            uICbBeginTimeMinComboBox.SelectedItem = this.CreateEinsatzInFalseTimespanParams.UICbBeginTimeMinComboBoxSelectedItem;

            // "8" in "cbZeitAufwand" Kombinationsfeld auswählen
            uICbZeitAufwandComboBox.SelectedItem = this.CreateEinsatzInFalseTimespanParams.UICbZeitAufwandComboBoxSelectedItem;

            // "14-Jun-2016" in "dPdate" Datumsauswahl auswählen
            uIDPdateDatePicker.DateAsString = this.CreateEinsatzInFalseTimespanParams.UIDPdateDatePickerDateAsString;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(220, 15));
        }
        
        /// <summary>
        /// CreateEinsatzInFalseTimespan_Assert - Verwenden Sie "CreateEinsatzInFalseTimespan_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void CreateEinsatzInFalseTimespan_Assert()
        {
            #region Variable Declarations
            WpfText uIDerEinsatzwurdeerfolText = this.UIPersonalPlanerWindow.UIEinsaetzeCRUCustom.UIDerEinsatzwurdeerfolText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Der Einsatz wurde erfolgreich erstellt!" Bezeichnung ist gleich 'In der angegebenen Zeit existiert bereits ein Einsatz!'
            Assert.AreEqual(this.CreateEinsatzInFalseTimespan_AssertExpectedValues.UIDerEinsatzwurdeerfolTextDisplayText, uIDerEinsatzwurdeerfolText.DisplayText);
        }
        
        #region Properties
        public virtual CreateEinsatzParams CreateEinsatzParams
        {
            get
            {
                if ((this.mCreateEinsatzParams == null))
                {
                    this.mCreateEinsatzParams = new CreateEinsatzParams();
                }
                return this.mCreateEinsatzParams;
            }
        }
        
        public virtual CreateEinsatz_AssertExpectedValues CreateEinsatz_AssertExpectedValues
        {
            get
            {
                if ((this.mCreateEinsatz_AssertExpectedValues == null))
                {
                    this.mCreateEinsatz_AssertExpectedValues = new CreateEinsatz_AssertExpectedValues();
                }
                return this.mCreateEinsatz_AssertExpectedValues;
            }
        }
        
        public virtual UpdateEinsatzParams UpdateEinsatzParams
        {
            get
            {
                if ((this.mUpdateEinsatzParams == null))
                {
                    this.mUpdateEinsatzParams = new UpdateEinsatzParams();
                }
                return this.mUpdateEinsatzParams;
            }
        }
        
        public virtual UpdateEinsatz_AssertExpectedValues UpdateEinsatz_AssertExpectedValues
        {
            get
            {
                if ((this.mUpdateEinsatz_AssertExpectedValues == null))
                {
                    this.mUpdateEinsatz_AssertExpectedValues = new UpdateEinsatz_AssertExpectedValues();
                }
                return this.mUpdateEinsatz_AssertExpectedValues;
            }
        }
        
        public virtual CreateEinsatzInFalseTimespanParams CreateEinsatzInFalseTimespanParams
        {
            get
            {
                if ((this.mCreateEinsatzInFalseTimespanParams == null))
                {
                    this.mCreateEinsatzInFalseTimespanParams = new CreateEinsatzInFalseTimespanParams();
                }
                return this.mCreateEinsatzInFalseTimespanParams;
            }
        }
        
        public virtual CreateEinsatzInFalseTimespan_AssertExpectedValues CreateEinsatzInFalseTimespan_AssertExpectedValues
        {
            get
            {
                if ((this.mCreateEinsatzInFalseTimespan_AssertExpectedValues == null))
                {
                    this.mCreateEinsatzInFalseTimespan_AssertExpectedValues = new CreateEinsatzInFalseTimespan_AssertExpectedValues();
                }
                return this.mCreateEinsatzInFalseTimespan_AssertExpectedValues;
            }
        }
        
        public UIPersonalPlanerWindow UIPersonalPlanerWindow
        {
            get
            {
                if ((this.mUIPersonalPlanerWindow == null))
                {
                    this.mUIPersonalPlanerWindow = new UIPersonalPlanerWindow();
                }
                return this.mUIPersonalPlanerWindow;
            }
        }
        
        public UIPersonalPlanerWindow1 UIPersonalPlanerWindow1
        {
            get
            {
                if ((this.mUIPersonalPlanerWindow1 == null))
                {
                    this.mUIPersonalPlanerWindow1 = new UIPersonalPlanerWindow1();
                }
                return this.mUIPersonalPlanerWindow1;
            }
        }
        #endregion
        
        #region Fields
        private CreateEinsatzParams mCreateEinsatzParams;
        
        private CreateEinsatz_AssertExpectedValues mCreateEinsatz_AssertExpectedValues;
        
        private UpdateEinsatzParams mUpdateEinsatzParams;
        
        private UpdateEinsatz_AssertExpectedValues mUpdateEinsatz_AssertExpectedValues;
        
        private CreateEinsatzInFalseTimespanParams mCreateEinsatzInFalseTimespanParams;
        
        private CreateEinsatzInFalseTimespan_AssertExpectedValues mCreateEinsatzInFalseTimespan_AssertExpectedValues;
        
        private UIPersonalPlanerWindow mUIPersonalPlanerWindow;
        
        private UIPersonalPlanerWindow1 mUIPersonalPlanerWindow1;
        #endregion
    }
    
    /// <summary>
    /// An "CreateEinsatz" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class CreateEinsatzParams
    {
        
        #region Fields
        /// <summary>
        /// "2" in "cbEinsatz" Kombinationsfeld auswählen
        /// </summary>
        public string UICbEinsatzComboBoxSelectedItem = "2";
        
        /// <summary>
        /// "1" in "cbMitarbeiter" Kombinationsfeld auswählen
        /// </summary>
        public string UICbMitarbeiterComboBoxSelectedItem = "1";
        
        /// <summary>
        /// "08" in "cbBeginTimeHour" Kombinationsfeld auswählen
        /// </summary>
        public string UICbBeginTimeHourComboBoxSelectedItem = "08";
        
        /// <summary>
        /// "00" in "cbBeginTimeMin" Kombinationsfeld auswählen
        /// </summary>
        public string UICbBeginTimeMinComboBoxSelectedItem = "00";
        
        /// <summary>
        /// "7" in "cbZeitAufwand" Kombinationsfeld auswählen
        /// </summary>
        public string UICbZeitAufwandComboBoxSelectedItem = "7";
        
        /// <summary>
        /// "06-Jun-2016" in "dPdate" Datumsauswahl auswählen
        /// </summary>
        public string UIDPdateDatePickerDateAsString = "06-Jun-2016";
        #endregion
    }
    
    /// <summary>
    /// An "CreateEinsatz_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class CreateEinsatz_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Der Einsatz wurde erfolgreich erstellt!" Bezeichnung ist gleich 'Der Einsatz wurde erfolgreich erstellt!'
        /// </summary>
        public string UIDerEinsatzwurdeerfolTextDisplayText = "Der Einsatz wurde erfolgreich erstellt!";
        #endregion
    }
    
    /// <summary>
    /// An "UpdateEinsatz" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class UpdateEinsatzParams
    {
        
        #region Fields
        /// <summary>
        /// "2" in "cbMitarbeiter" Kombinationsfeld auswählen
        /// </summary>
        public string UICbMitarbeiterComboBoxSelectedItem = "2";
        
        /// <summary>
        /// "08-Jun-2016" in "dPdate" Datumsauswahl auswählen
        /// </summary>
        public string UIDPdateDatePickerDateAsString = "08-Jun-2016";
        #endregion
    }
    
    /// <summary>
    /// An "UpdateEinsatz_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class UpdateEinsatz_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Der Einsatz wurde erfolgreich erstellt!" Bezeichnung ist gleich 'Der Einsatz wurde erfolgreich geändert!'
        /// </summary>
        public string UIDerEinsatzwurdeerfolTextDisplayText = "Der Einsatz wurde erfolgreich geändert!";
        #endregion
    }
    
    /// <summary>
    /// An "CreateEinsatzInFalseTimespan" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class CreateEinsatzInFalseTimespanParams
    {
        
        #region Fields
        /// <summary>
        /// "2" in "cbEinsatz" Kombinationsfeld auswählen
        /// </summary>
        public string UICbEinsatzComboBoxSelectedItem = "2";
        
        /// <summary>
        /// "2" in "cbMitarbeiter" Kombinationsfeld auswählen
        /// </summary>
        public string UICbMitarbeiterComboBoxSelectedItem = "2";
        
        /// <summary>
        /// "09" in "cbBeginTimeHour" Kombinationsfeld auswählen
        /// </summary>
        public string UICbBeginTimeHourComboBoxSelectedItem = "09";
        
        /// <summary>
        /// "00" in "cbBeginTimeMin" Kombinationsfeld auswählen
        /// </summary>
        public string UICbBeginTimeMinComboBoxSelectedItem = "00";
        
        /// <summary>
        /// "8" in "cbZeitAufwand" Kombinationsfeld auswählen
        /// </summary>
        public string UICbZeitAufwandComboBoxSelectedItem = "8";
        
        /// <summary>
        /// "14-Jun-2016" in "dPdate" Datumsauswahl auswählen
        /// </summary>
        public string UIDPdateDatePickerDateAsString = "14-Jun-2016";
        #endregion
    }
    
    /// <summary>
    /// An "CreateEinsatzInFalseTimespan_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class CreateEinsatzInFalseTimespan_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Der Einsatz wurde erfolgreich erstellt!" Bezeichnung ist gleich 'In der angegebenen Zeit existiert bereits ein Einsatz!'
        /// </summary>
        public string UIDerEinsatzwurdeerfolTextDisplayText = "In der angegebenen Zeit existiert bereits ein Einsatz!";
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class UIPersonalPlanerWindow : WpfWindow
    {
        
        public UIPersonalPlanerWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "PersonalPlaner";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("PersonalPlaner");
            #endregion
        }
        
        #region Properties
        public WpfButton UIEinsatzerstellenButton
        {
            get
            {
                if ((this.mUIEinsatzerstellenButton == null))
                {
                    this.mUIEinsatzerstellenButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIEinsatzerstellenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnCreateEinsatz";
                    this.mUIEinsatzerstellenButton.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUIEinsatzerstellenButton;
            }
        }
        
        public UIEinsaetzeCRUCustom UIEinsaetzeCRUCustom
        {
            get
            {
                if ((this.mUIEinsaetzeCRUCustom == null))
                {
                    this.mUIEinsaetzeCRUCustom = new UIEinsaetzeCRUCustom(this);
                }
                return this.mUIEinsaetzeCRUCustom;
            }
        }
        
        public WpfButton UIAlleEinsätzeButton
        {
            get
            {
                if ((this.mUIAlleEinsätzeButton == null))
                {
                    this.mUIAlleEinsätzeButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIAlleEinsätzeButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnAllEinsaetze";
                    this.mUIAlleEinsätzeButton.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUIAlleEinsätzeButton;
            }
        }
        
        public UILvEinsaetzeCustom UILvEinsaetzeCustom
        {
            get
            {
                if ((this.mUILvEinsaetzeCustom == null))
                {
                    this.mUILvEinsaetzeCustom = new UILvEinsaetzeCustom(this);
                }
                return this.mUILvEinsaetzeCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIEinsatzerstellenButton;
        
        private UIEinsaetzeCRUCustom mUIEinsaetzeCRUCustom;
        
        private WpfButton mUIAlleEinsätzeButton;
        
        private UILvEinsaetzeCustom mUILvEinsaetzeCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class UIEinsaetzeCRUCustom : WpfCustom
    {
        
        public UIEinsaetzeCRUCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EinsaetzeCRu";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "EinsaetzeCRU";
            this.WindowTitles.Add("PersonalPlaner");
            #endregion
        }
        
        #region Properties
        public WpfComboBox UICbEinsatzComboBox
        {
            get
            {
                if ((this.mUICbEinsatzComboBox == null))
                {
                    this.mUICbEinsatzComboBox = new WpfComboBox(this);
                    #region Suchkriterien
                    this.mUICbEinsatzComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cbEinsatz";
                    this.mUICbEinsatzComboBox.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUICbEinsatzComboBox;
            }
        }
        
        public WpfComboBox UICbMitarbeiterComboBox
        {
            get
            {
                if ((this.mUICbMitarbeiterComboBox == null))
                {
                    this.mUICbMitarbeiterComboBox = new WpfComboBox(this);
                    #region Suchkriterien
                    this.mUICbMitarbeiterComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cbMitarbeiter";
                    this.mUICbMitarbeiterComboBox.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUICbMitarbeiterComboBox;
            }
        }
        
        public WpfComboBox UICbBeginTimeHourComboBox
        {
            get
            {
                if ((this.mUICbBeginTimeHourComboBox == null))
                {
                    this.mUICbBeginTimeHourComboBox = new WpfComboBox(this);
                    #region Suchkriterien
                    this.mUICbBeginTimeHourComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cbBeginTimeHour";
                    this.mUICbBeginTimeHourComboBox.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUICbBeginTimeHourComboBox;
            }
        }
        
        public WpfComboBox UICbBeginTimeMinComboBox
        {
            get
            {
                if ((this.mUICbBeginTimeMinComboBox == null))
                {
                    this.mUICbBeginTimeMinComboBox = new WpfComboBox(this);
                    #region Suchkriterien
                    this.mUICbBeginTimeMinComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cbBeginTimeMin";
                    this.mUICbBeginTimeMinComboBox.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUICbBeginTimeMinComboBox;
            }
        }
        
        public WpfComboBox UICbZeitAufwandComboBox
        {
            get
            {
                if ((this.mUICbZeitAufwandComboBox == null))
                {
                    this.mUICbZeitAufwandComboBox = new WpfComboBox(this);
                    #region Suchkriterien
                    this.mUICbZeitAufwandComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cbZeitAufwand";
                    this.mUICbZeitAufwandComboBox.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUICbZeitAufwandComboBox;
            }
        }
        
        public WpfDatePicker UIDPdateDatePicker
        {
            get
            {
                if ((this.mUIDPdateDatePicker == null))
                {
                    this.mUIDPdateDatePicker = new WpfDatePicker(this);
                    #region Suchkriterien
                    this.mUIDPdateDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "dPdate";
                    this.mUIDPdateDatePicker.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUIDPdateDatePicker;
            }
        }
        
        public WpfButton UISpeichernButton
        {
            get
            {
                if ((this.mUISpeichernButton == null))
                {
                    this.mUISpeichernButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUISpeichernButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnSave";
                    this.mUISpeichernButton.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUISpeichernButton;
            }
        }
        
        public WpfText UIDerEinsatzwurdeerfolText
        {
            get
            {
                if ((this.mUIDerEinsatzwurdeerfolText == null))
                {
                    this.mUIDerEinsatzwurdeerfolText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIDerEinsatzwurdeerfolText.SearchProperties[WpfText.PropertyNames.AutomationId] = "lblMeldung";
                    this.mUIDerEinsatzwurdeerfolText.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUIDerEinsatzwurdeerfolText;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mUICbEinsatzComboBox;
        
        private WpfComboBox mUICbMitarbeiterComboBox;
        
        private WpfComboBox mUICbBeginTimeHourComboBox;
        
        private WpfComboBox mUICbBeginTimeMinComboBox;
        
        private WpfComboBox mUICbZeitAufwandComboBox;
        
        private WpfDatePicker mUIDPdateDatePicker;
        
        private WpfButton mUISpeichernButton;
        
        private WpfText mUIDerEinsatzwurdeerfolText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class UILvEinsaetzeCustom : WpfCustom
    {
        
        public UILvEinsaetzeCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ListView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "lvEinsaetze";
            this.WindowTitles.Add("PersonalPlaner");
            #endregion
        }
        
        #region Properties
        public UIDgEinsaetzeTable UIDgEinsaetzeTable
        {
            get
            {
                if ((this.mUIDgEinsaetzeTable == null))
                {
                    this.mUIDgEinsaetzeTable = new UIDgEinsaetzeTable(this);
                }
                return this.mUIDgEinsaetzeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDgEinsaetzeTable mUIDgEinsaetzeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class UIDgEinsaetzeTable : WpfTable
    {
        
        public UIDgEinsaetzeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "dgEinsaetze";
            this.WindowTitles.Add("PersonalPlaner");
            #endregion
        }
        
        #region Properties
        public UIItem1Row UIItem1Row
        {
            get
            {
                if ((this.mUIItem1Row == null))
                {
                    this.mUIItem1Row = new UIItem1Row(this);
                }
                return this.mUIItem1Row;
            }
        }
        #endregion
        
        #region Fields
        private UIItem1Row mUIItem1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class UIItem1Row : WpfRow
    {
        
        public UIItem1Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfRow.PropertyNames.Name] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("PersonalPlaner");
            #endregion
        }
        
        #region Properties
        public UIAffolterCell UIAffolterCell
        {
            get
            {
                if ((this.mUIAffolterCell == null))
                {
                    this.mUIAffolterCell = new UIAffolterCell(this);
                }
                return this.mUIAffolterCell;
            }
        }
        #endregion
        
        #region Fields
        private UIAffolterCell mUIAffolterCell;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class UIAffolterCell : WpfCell
    {
        
        public UIAffolterCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Mitarbeiter";
            this.WindowTitles.Add("PersonalPlaner");
            #endregion
        }
        
        #region Properties
        public WpfText UIAffolterText
        {
            get
            {
                if ((this.mUIAffolterText == null))
                {
                    this.mUIAffolterText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIAffolterText.SearchProperties[WpfText.PropertyNames.Name] = "Affolter";
                    this.mUIAffolterText.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUIAffolterText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIAffolterText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "14.0.23107.0")]
    public class UIPersonalPlanerWindow1 : WinWindow
    {
        
        public UIPersonalPlanerWindow1()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "PersonalPlaner";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("PersonalPlaner");
            #endregion
        }
        
        #region Properties
        public WinButton UISchließenButton
        {
            get
            {
                if ((this.mUISchließenButton == null))
                {
                    this.mUISchließenButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUISchließenButton.SearchProperties[WinButton.PropertyNames.Name] = "Schließen";
                    this.mUISchließenButton.WindowTitles.Add("PersonalPlaner");
                    #endregion
                }
                return this.mUISchließenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISchließenButton;
        #endregion
    }
}
